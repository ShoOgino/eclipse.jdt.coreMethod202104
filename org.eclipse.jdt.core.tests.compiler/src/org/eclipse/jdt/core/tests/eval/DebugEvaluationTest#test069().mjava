public void test069() {
	if (this.complianceLevel < ClassFileConstants.JDK1_5) return;
	try {
		String sourceA69 =
			"public enum A69 {\n"
				+ "\tA(2), B(1);\n"
				+ "\tprivate int i;\n"
				+ "\tprivate A69(int i) {\n"
				+ "\t\tthis.i = i;\n"
				+ "\t}\n"
				+ "\tpublic String toString() {\n"
				+ "\t\treturn String.valueOf(this.i);\n"
				+ "\t}\n"
				+ "\tpublic static void bar() {\n"
				+ "\t}\n"
				+ "}";
		compileAndDeploy15(sourceA69, "A69");

		String userCode = "A69.bar();";
		JDIStackFrame stackFrame =
			new JDIStackFrame(this.jdiVM, this, userCode, "A69", "bar", -1);

		DebugRequestor requestor = new DebugRequestor();
		char[] snippet = "enum E { C }; return String.toString(E.C.getName());".toCharArray();
		try {
			this.context.evaluate(
				snippet,
				stackFrame.localVariableTypeNames(),
				stackFrame.localVariableNames(),
				stackFrame.localVariableModifiers(),
				stackFrame.declaringTypeName(),
				stackFrame.isStatic(),
				stackFrame.isConstructorCall(),
				getEnv(),
				getCompilerOptions(),
				requestor,
				getProblemFactory());
		} catch (InstallException e) {
			assertTrue("No targetException " + e.getMessage(), false);
		}
		assertTrue(
			"Should get two results but got " + (requestor.resultIndex + 1),
			requestor.resultIndex == 1);
		EvaluationResult result = requestor.results[0];
		assertTrue("Code snippet should not have problems", result.hasProblems());
		assertEquals("Wrong size", 1, result.getProblems().length);
		assertEquals("Wrong pb", 31, result.getProblems()[0].getID() & IProblem.IgnoreCategoriesMask);
		result = requestor.results[1];
		assertTrue("Code snippet should not have problems", result.hasProblems());
		assertEquals("Wrong size", 1, result.getProblems().length);
		assertEquals("Wrong pb", 50, result.getProblems()[0].getID() & IProblem.IgnoreCategoriesMask);
	} finally {
		removeTempClass("A69");
	}
}

