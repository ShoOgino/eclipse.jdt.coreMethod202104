public void testBug542707_002() {
	if (this.complianceLevel < ClassFileConstants.JDK15) return; // uses switch expression
	Map options = getCompilerOptions();
	options.put(JavaCore.COMPILER_PB_UNCLOSED_CLOSEABLE, CompilerOptions.ERROR);
	options.put(JavaCore.COMPILER_PB_POTENTIALLY_UNCLOSED_CLOSEABLE, CompilerOptions.ERROR);
	options.put(CompilerOptions.OPTION_EnablePreviews, CompilerOptions.ENABLED);
	options.put(CompilerOptions.OPTION_ReportPreviewFeatures, CompilerOptions.IGNORE);
	runLeakTest(
		new String[] {
			"X.java",
			"import java.io.Closeable;\n"+
			"import java.io.IOException;\n"+
			"\n"+
			"public class X implements Closeable{\n"+
			"	public static int foo(int i) throws IOException {\n"+
			"		int k = 0;\n"+
			"		X x = null;\n"+
			"		try {\n"+
			"			x = new X();\n"+
			"			x  = switch (i) { \n"+
			"			  case 1  ->   {\n"+
			"				 x = new X();\n"+
			"				 yield x;\n"+
			"			  }\n"+
			"			  default -> x;\n"+
			"			};\n"+
			"		} finally {\n"+
			"			x.close();\n"+
			"		}\n"+
			"		return k ;\n"+
			"	}\n"+
			"\n"+
			"	public static void main(String[] args) {\n"+
			"		try {\n"+
			"			System.out.println(foo(3));\n"+
			"		} catch (IOException e) {\n"+
			"			// do nothing\n"+
			"		}\n"+
			"	}\n"+
			"	@Override\n"+
			"	public void close() throws IOException {\n"+
			"		Zork();\n"+
			"	}\n"+
			"}\n"
		},
		"----------\n" +
		"1. ERROR in X.java (at line 12)\n" +
		"	x = new X();\n" +
		"	^^^^^^^^^^^\n" +
		"Resource leak: \'x\' is not closed at this location\n" +
		"----------\n" +
		"2. ERROR in X.java (at line 32)\n" +
		"	Zork();\n" +
		"	^^^^\n" +
		"The method Zork() is undefined for the type X\n" +
		"----------\n",
		options);
}

