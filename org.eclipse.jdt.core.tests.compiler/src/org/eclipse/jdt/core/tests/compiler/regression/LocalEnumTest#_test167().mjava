//https://bugs.eclipse.org/bugs/show_bug.cgi?id=251814 - variation
public void _test167() throws Exception {
	this.runNegativeTest(
		new String[] {
			"X.java", // =================
			"public enum X {\n" +
			"    ;\n" +
			"    static int valueOf(String arg0) { return 0; }//9\n" +
			"    void foo() {\n" +
			"    	int i = X.valueOf(\"\");\n" +
			"    }\n" +
			"}\n",
			"Other.java",// =================
			"public class Other {\n" +
			"    void foo() {\n" +
			"    	int i = X.valueOf(\"\");\n" +
			"    }\n" +
			"}\n", // =================
		},
		"----------\n" +
		"1. ERROR in X.java (at line 3)\n" +
		"	static int valueOf(String arg0) { return 0; }//9\n" +
		"	           ^^^^^^^^^^^^^^^^^^^^\n" +
		"The enum X already defines the method valueOf(String) implicitly\n" +
		"----------\n" +
		"2. ERROR in X.java (at line 5)\n" +
		"	int i = X.valueOf(\"\");\n" +
		"	        ^^^^^^^^^^^^^\n" +
		"Type mismatch: cannot convert from X to int\n" +
		"----------\n" +
		"----------\n" +
		"1. ERROR in Other.java (at line 3)\n" +
		"	int i = X.valueOf(\"\");\n" +
		"	        ^^^^^^^^^^^^^\n" +
		"Type mismatch: cannot convert from X to int\n" +
		"----------\n",
		null,
		true, // flush output
		null,
		true, // generate output
		false,
		false);
	// check consistency of problem when incremental compiling against X problemType
	this.runNegativeTest(
		new String[] {
				"Other.java",// =================
				"public class Other {\n" +
				"    void foo() {\n" +
				"    	int i = X.valueOf(\"\");\n" +
				"    }\n" +
				"}\n", // =================
		},
		"----------\n" +
		"1. ERROR in Other.java (at line 3)\n" +
		"	int i = X.valueOf(\"\");\n" +
		"	          ^^^^^^^\n" +
		"The method valueOf(Class<T>, String) in the type Enum<X> is not applicable for the arguments (String)\n" +
		"----------\n",
		null,
		false, // flush output
		null,
		true, // generate output
		false,
		false);
	}

