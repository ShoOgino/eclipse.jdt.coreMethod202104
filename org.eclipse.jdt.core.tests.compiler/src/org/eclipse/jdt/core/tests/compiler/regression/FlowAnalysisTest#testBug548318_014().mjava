/**
 * From JLS 13 16.1.7 , Suppose that the switch expression has result expressions e1, â€¦, en, all of
 * which are boolean-valued.
 * The following rules apply only if the switch block of a switch expression consists of switch labeled rules:
 * V is definitely assigned after a switch expression when true iff for every switch labeled rule one of the following is true:
 * 		It is a switch labeled expression e and V is definitely assigned after e when true.
 * 		It is a switch labeled block b and for every value yield statement expression e contained in b that may exit the switch expression,
 * 			V is definitely assigned after e when true.
 * 		It is a switch labeled throw statement.
 *
 * V is definitely assigned after a switch expression when false iff for every switch labeled rule one of the following is true:
 * 		It is a switch labeled expression e and V is definitely assigned after e when false.
 * 		It is a switch labeled block b and for every value yield statement expression e contained in b that may exit the switch expression,
 * 		V is definitely assigned after e when false.
 * 		It is a switch labeled throw statement.
 */
public void testBug548318_014() {
	if (!checkPreviewAllowed())


		return;
	Map<String, String> defaultOptions = setPresetPreviewOptions();
	String expectedProblemLog =
			"----------\n" +
			"1. ERROR in X.java (at line 23)\n" +
			"	Zork();\n" +
			"	^^^^\n" +
			"The method Zork() is undefined for the type X\n" +
			"----------\n";
	String[] testFiles = new String[] {
			"X.java", // =================
			"import java.io.IOException;\n" +
			"public class X {\n" +
			"	public static int foo(int i) throws IOException {\n" +
			"		int v;\n" +
			"		boolean b = switch (i ) {\n" +
			"		case 0 -> (v = 1) != 0;\n" +
			"		case 1 -> (v = 1) == 0;\n" +
			"		case 2 -> {\n" +
			"			v = 2;\n" +
			"			yield true;\n" +
			"		}\n" +
			"		case 3 -> {\n" +
			"			v = 3;\n" +
			"			yield false;\n" +
			"		}\n" +
			"		default -> throw new IOException();\n" +
			"		};\n" +
			"		int d = b == true ? 0 : 1; \n" +
			"		return v + d;\n" +
			"	}\n" +
			"	\n" +
			"	public boolean bar() {\n" +
			"		Zork();\n" +
			"		return true;\n" +
			"	}\n" +
			"	public static void main(String[] args) {\n" +
			"		try {\n" +
			"			System.out.println(foo(3));\n" +
			"		} catch (IOException e) {\n" +
			"			e.printStackTrace();\n" +
			"		}\n" +
			"	}\n" +
			"}\n",
	};
	this.runNegativeTest(
			testFiles,
			expectedProblemLog,
			null,
			true,
			defaultOptions);
}

