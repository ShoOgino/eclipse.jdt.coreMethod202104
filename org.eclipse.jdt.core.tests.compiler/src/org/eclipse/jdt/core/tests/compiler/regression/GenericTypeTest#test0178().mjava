	// reject instanceof type variable or parameterized type
	public void test0178() {
		Map customOptions = getCompilerOptions();
		this.runNegativeTest(
			new String[] {
				"X.java",
				"public class X <T> {\n" +
				"	\n" +
				"	T foo(T t) {\n" +
				"		if (t instanceof X<T>) {\n" +
				"			return t;\n" +
				"		} else if (t instanceof X<String>) {\n" +
				"			return t;\n" +
				"		} else if (t instanceof X<?>) {\n" +  // ok
				"			return t;\n" +
				"		} else 	if (t instanceof T) {\n" +
				"			return t;\n" +
				"		} else if (t instanceof X) {\n" +
				"			return t;\n" +
				"		}\n" +
				"		return null;\n" +
				"	}\n" +
				"}\n",
			},
			"----------\n" +
			"1. ERROR in X.java (at line 4)\n" +
			"	if (t instanceof X<T>) {\n" +
			"	    ^^^^^^^^^^^^^^\n" +
			"Cannot perform instanceof check against parameterized type X<T>. Use the form X<?> instead since further generic type information will be erased at runtime\n" +
			"----------\n" +
			"2. ERROR in X.java (at line 6)\n" +
			"	} else if (t instanceof X<String>) {\n" +
			"	           ^^^^^^^^^^^^^^\n" +
			"Cannot perform instanceof check against parameterized type X<String>. Use the form X<?> instead since further generic type information will be erased at runtime\n" +
			"----------\n" +
			"3. ERROR in X.java (at line 10)\n" +
			"	} else 	if (t instanceof T) {\n" +
			"	       	    ^^^^^^^^^^^^^^\n" +
			"Cannot perform instanceof check against type parameter T. Use its erasure Object instead since further generic type information will be erased at runtime\n" +
			"----------\n",
			null,
			true,
			customOptions);
	}

