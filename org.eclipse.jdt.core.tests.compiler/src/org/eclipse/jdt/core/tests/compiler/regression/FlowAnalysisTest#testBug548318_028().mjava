/**
 * From JLS 13 16.1.8, Suppose that the switch expression has result expressions e1, â€¦, en, not all of
 * which are boolean-valued.
 * V is [un]assigned before the expression, block, or throw statement of a switch labeled rule of a
 * switch expression iff V is [un]assigned after the selector expression of the switch expression.
 */
public void testBug548318_028() {
	if (!checkPreviewAllowed())


		return;
	Map<String, String> defaultOptions = setPresetPreviewOptions();
	String expectedProblemLog =
			"----------\n" +
			"1. ERROR in X.java (at line 7)\n" +
			"	case 0 ->  v;\n" +
			"	           ^\n" +
			"The local variable v may not have been initialized\n" +
			"----------\n" +
			"2. ERROR in X.java (at line 20)\n" +
			"	Zork();\n" +
			"	^^^^\n" +
			"The method Zork() is undefined for the type X\n" +
			"----------\n";
	String[] testFiles = new String[] {
			"X.java", // =================
			"import java.io.IOException;\n" +
			"\n" +
			"public class X {\n" +
			"	public static int foo(int i) throws IOException {\n" +
			"		int v ;\n" +
			"		int t = switch (i) {\n" +
			"		case 0 ->  v;\n" +
			"		case 2 -> {\n" +
			"			if (i > 1) {\n" +
			"				yield  2;\n" +
			"			}\n" +
			"			yield 3;\n" +
			"		}\n" +
			"		default -> throw new IOException();\n" +
			"		};\n" +
			"		return t;\n" +
			"	}\n" +
			"	\n" +
			"	public boolean bar() {\n" +
			"		Zork();\n" +
			"		return true;\n" +
			"	}\n" +
			"	public static void main(String[] args) {\n" +
			"		try {\n" +
			"			System.out.println(foo(3));\n" +
			"		} catch (IOException e) {\n" +
			"			// TODO Auto-generated catch block\n" +
			"			e.printStackTrace();\n" +
			"		}\n" +
			"	}\n" +
			"}\n",
	};
	this.runNegativeTest(
			testFiles,
			expectedProblemLog,
			null,
			true,
			defaultOptions);
}

