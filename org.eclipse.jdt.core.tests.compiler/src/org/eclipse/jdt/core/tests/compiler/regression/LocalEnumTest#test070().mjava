public void test070() throws Exception {
	this.runConformTest(
		new String[] {
			"X.java",
			"public class X {\n" +
			"  public static void main(String[] args) {\n" +
			"	 enum Y  {\n" +
			"    	PLUS {\n" +
			"        	double eval(double x, double y) { return x + y; }\n" +
			"    	};\n" +
			"\n" +
			"    	// Perform the arithmetic X represented by this constant\n" +
			"    	abstract double eval(double x, double y);\n" +
            "    }\n" +
            "  }\n" +
			"}"
		},
		""
	);
	String expectedOutput =
			"  // Method descriptor #18 (Ljava/lang/String;I)V\n" +
			"  // Stack: 3, Locals: 3\n" +
			"  private X$1Y(java.lang.String arg0, int arg1);\n" +
			"    0  aload_0 [this]\n" +
			"    1  aload_1 [arg0]\n" +
			"    2  iload_2 [arg1]\n" +
			"    3  invokespecial java.lang.Enum(java.lang.String, int) [25]\n" +
			"    6  return\n";

	ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
	byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X$1Y.class"));
	String actualOutput =
		disassembler.disassemble(
			classFileBytes,
			"\n",
			ClassFileBytesDisassembler.DETAILED);
	int index = actualOutput.indexOf(expectedOutput);
	if (index == -1 || expectedOutput.length() == 0) {
		System.out.println(Util.displayString(actualOutput, 3));
	}
	if (index == -1) {
		assertEquals("Wrong contents", expectedOutput, actualOutput);
	}
}

