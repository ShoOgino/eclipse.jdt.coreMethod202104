	// Test that pattern variables are shadowed by parameters in an anonymous class
	// creation
	public void test063c() {
		Map<String, String> compilerOptions = getCompilerOptions(true);
		runConformTest(
				new String[] {
						"X.java",
						"public class X {\n"+
						"	public static void main(String argv[]) {\n" +
						"		System.out.println(new X().foo(\"test\"));\n" +
						"	}\n" +
						" @SuppressWarnings(\"preview\")\n"+
						" public int foo(Object o) {\n"
						+ "		int len = (o instanceof String p) ? test(new X.FI() {\n"
						+ "			String s = p; // allowed\n"
						+ "			@Override\n"
						+ "			public int length(String p) {\n"
						+ "				return p.length();\n"
						+ "			}\n"
						+ "		}) : test(new X.FI() {\n"
						+ "			@Override\n"
						+ "			public int length(String p) {\n"
						+ "				return p.length();\n"
						+ "			}\n"
						+ "		});\n"
						+ "		return len;\n"
						+ "	}\n"
						+ "	public int test(FI fi) {\n"
						+ "		return fi.length(\"fi\");\n"
						+ "	}\n"
						+ "	interface FI {\n"
						+ "		public int length(String str);\n"
						+ "	}" +
						"}",
					},
					"2",
					compilerOptions);
	}

