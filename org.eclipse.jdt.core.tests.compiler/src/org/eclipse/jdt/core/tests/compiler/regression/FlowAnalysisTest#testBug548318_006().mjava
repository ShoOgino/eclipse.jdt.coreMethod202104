/**
 * From JLS 13 16.1.7 , Suppose that the switch expression has result expressions e1, â€¦, en, all of
 * which are boolean-valued.
 * V is definitely assigned after a switch expression when true iff for every value yield statement with
 * expression e in the switch block that may exit the switch expression, V is definitely assigned after e when true.
 * V is definitely assigned after a switch expression when false iff for every value yield statement with
 * expression e in the switch block that may exit the switch expression, V is definitely assigned after e when false.
 */
public void testBug548318_006() {
	if (!checkPreviewAllowed())


		return;
	Map<String, String> defaultOptions = setPresetPreviewOptions();
	String expectedProblemLog =
			"----------\n" +
			"1. ERROR in X.java (at line 22)\n" +
			"	Zork();\n" +
			"	^^^^\n" +
			"The method Zork() is undefined for the type X\n" +
			"----------\n";
	String[] testFiles = new String[] {
			"X.java", // =================
			"public class X {\n" +
			"	public static int foo(int i) {\n" +
			"		int v;\n" +
			"		boolean b = switch (i) {\n" +
			"		case 1 :\n" +
			"			v = 1;\n" +
			"			yield true;\n" +
			"		case 2 : {\n" +
			"			v = 2;\n" +
			"			yield true;\n" +
			"		}\n" +
			"		default : {\n" +
			"			v = 3;\n" +
			"			yield false;\n" +
			"		}\n" +
			"		};\n" +
			"		int d = b == true ? 0 : 1; \n" +
			"		return v + d;\n" +
			"	}\n" +
			"\n" +
			"	public boolean bar() {\n" +
			"		Zork();\n" +
			"		return true;\n" +
			"	}\n" +
			"	public static void main(String[] args) {\n" +
			"		System.out.println(foo(3));\n" +
			"	}\n" +
			"}\n",
	};
	this.runNegativeTest(
			testFiles,
			expectedProblemLog,
			null,
			true,
			defaultOptions);
}

