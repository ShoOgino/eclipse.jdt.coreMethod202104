//https://bugs.eclipse.org/bugs/show_bug.cgi?id=126087
// Commented and created https://bugs.eclipse.org/bugs/show_bug.cgi?id=570106
public void _test127() throws Exception {
	this.runConformTest(
		new String[] {
				"X.java",
				"public class X {\n" +
				"    public static void main(String[] args) {\n" +
				"		enum Y {\n" +
				"			VALUE {\n" +
				"				void foo() {\n" +
				"				};\n" +
				"			};\n" +
				"			abstract void foo();\n" +
				"		}\n" +
				"      System.out.println(\"[\"+Y.values().length+\"]\");\n" +
				"    }\n" +
				"}"
		},
		"[1]");

	ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
	byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X.class"));
	String actualOutput =
		disassembler.disassemble(
			classFileBytes,
			"\n",
			ClassFileBytesDisassembler.DETAILED);

	String expectedOutput =
		"public class X {\n"
		+ "  \n"
		+ "  // Method descriptor #6 ()V\n"
		+ "  // Stack: 1, Locals: 1\n"
		+ "  public X();\n"
		+ "    0  aload_0 [this]\n"
		+ "    1  invokespecial java.lang.Object() [8]\n"
		+ "    4  return\n"
		+ "      Line numbers:\n"
		+ "        [pc: 0, line: 1]\n"
		+ "      Local variable table:\n"
		+ "        [pc: 0, pc: 5] local: this index: 0 type: X\n"
		+ "  \n"
		+ "  // Method descriptor #15 ([Ljava/lang/String;)V\n"
		+ "  // Stack: 4, Locals: 1\n"
		+ "  public static void main(java.lang.String[] args);\n"
		+ "     0  getstatic java.lang.System.out : java.io.PrintStream [16]\n"
		+ "     3  new java.lang.StringBuilder [22]\n"
		+ "     6  dup\n"
		+ "     7  ldc <String \"[\"> [24]\n"
		+ "     9  invokespecial java.lang.StringBuilder(java.lang.String) [26]\n"
		+ "    12  invokestatic X$1Y.values() : X$1Y[] [29]\n"
		+ "    15  arraylength\n"
		+ "    16  invokevirtual java.lang.StringBuilder.append(int) : java.lang.StringBuilder [35]\n"
		+ "    19  ldc <String \"]\"> [39]\n"
		+ "    21  invokevirtual java.lang.StringBuilder.append(java.lang.String) : java.lang.StringBuilder [41]\n"
		+ "    24  invokevirtual java.lang.StringBuilder.toString() : java.lang.String [44]\n"
		+ "    27  invokevirtual java.io.PrintStream.println(java.lang.String) : void [48]\n"
		+ "    30  return\n"
		+ "      Line numbers:\n"
		+ "        [pc: 0, line: 10]\n"
		+ "        [pc: 30, line: 11]\n"
		+ "      Local variable table:\n"
		+ "        [pc: 0, pc: 31] local: args index: 0 type: java.lang.String[]\n"
		+ "\n"
		+ "  Inner classes:\n"
		+ "    [inner class info: #30 X$1Y, outer class info: #0\n"
		+ "     inner name: #58 Y, accessflags: 17416 abstract static]\n"
		+ "\n"
		+ "Nest Members:\n"
		+ "   #30 X$1Y,\n"
		+ "   #60 X$1Y$1\n"
		+ "}";

	int index = actualOutput.indexOf(expectedOutput);

	if (index == -1 || expectedOutput.length() == 0) {
		System.out.println(Util.displayString(actualOutput, 3));
	}
	if (index == -1) {
		assertEquals("unexpected bytecode sequence", expectedOutput, actualOutput);
	}

	disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
	classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +"X$1Y.class"));
	actualOutput =
		disassembler.disassemble(
			classFileBytes,
			"\n",
			ClassFileBytesDisassembler.DETAILED);

	expectedOutput =
		"ENUM$VALUES";

	index = actualOutput.indexOf(expectedOutput);
	if (index != -1) {
		System.out.println(Util.displayString(actualOutput, 3));
	}
	if (index != -1) {
		assertTrue("Must not have field ENUM$VALUES", false);
	}
}

