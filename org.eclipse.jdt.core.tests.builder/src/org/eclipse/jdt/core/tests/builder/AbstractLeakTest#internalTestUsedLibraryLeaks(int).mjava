	private void internalTestUsedLibraryLeaks(int kind) throws Exception {
		if(LINUX && !lsofCheckDone) {
			selfTestLsof();
		}

		String projectName = getName();
		IPath projectPath = env.addProject(projectName, getCompatibilityLevel());
		env.setOutputFolder(projectPath, "");
		env.addExternalJars(projectPath, Util.getJavaClassLibs());
		IPath internalJar = addInternalJar(projectPath);

		createJavaFile(projectPath);

		switch (kind) {
		case IncrementalProjectBuilder.CLEAN_BUILD:
			cleanBuild(projectName);
			assertNotLeaked(internalJar);
			break;
		case IncrementalProjectBuilder.FULL_BUILD:
			fullBuild(projectPath);
			assertNotLeaked(internalJar);
			break;
		case IncrementalProjectBuilder.INCREMENTAL_BUILD:
			incrementalBuild(projectPath);
			changeJavaFile(projectPath);
			incrementalBuild(projectPath);
			assertNotLeaked(internalJar);
			break;
		default:
			fail("Unexpected build kind: " + kind);
		}
	}

