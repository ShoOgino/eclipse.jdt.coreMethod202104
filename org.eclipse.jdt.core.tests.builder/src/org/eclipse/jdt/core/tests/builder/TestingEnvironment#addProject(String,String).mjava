	public IPath addProject(String projectName, String compliance){
		checkAssertion("a workspace must be open", this.isOpen); //$NON-NLS-1$
		IProject project = createProject(projectName);
		int requiredComplianceFlag = 0;
		String compilerVersion = null;
		if ("1.5".equals(compliance)) {
			requiredComplianceFlag = AbstractCompilerTest.F_1_5;
			compilerVersion = CompilerOptions.VERSION_1_5;
		}
		else if ("1.6".equals(compliance)) {
			requiredComplianceFlag = AbstractCompilerTest.F_1_6;
			compilerVersion = CompilerOptions.VERSION_1_6;
		}
		else if ("1.7".equals(compliance)) {
			requiredComplianceFlag = AbstractCompilerTest.F_1_7;
			compilerVersion = CompilerOptions.VERSION_1_7;
		}
		else if ("1.8".equals(compliance)) {
			requiredComplianceFlag = AbstractCompilerTest.F_1_8;
			compilerVersion = CompilerOptions.VERSION_1_8;
		}
		else if ("9".equals(compliance)) {
			requiredComplianceFlag = AbstractCompilerTest.F_9;
			compilerVersion = CompilerOptions.VERSION_9;
		}
		else if ("10".equals(compliance)) {
			requiredComplianceFlag = AbstractCompilerTest.F_10;
			compilerVersion = CompilerOptions.VERSION_10;
		}
		else if ("11".equals(compliance)) {
			requiredComplianceFlag = AbstractCompilerTest.F_11;
			compilerVersion = CompilerOptions.VERSION_11;
		}
		else if ("12".equals(compliance)) {
			requiredComplianceFlag = AbstractCompilerTest.F_12;
			compilerVersion = CompilerOptions.VERSION_12;
		}
		else if (!"1.4".equals(compliance) && !"1.3".equals(compliance)) {
			throw new UnsupportedOperationException("Test framework doesn't support compliance level: " + compliance);
		}
		if (requiredComplianceFlag != 0) {
			if (CompilerOptions.versionToJdkLevel(System.getProperty("java.specification.version")) < requiredComplianceFlag)
				throw new RuntimeException("This test requires a " + compliance + " JRE");
			IJavaProject javaProject = JavaCore.create(project);
			Map options = new HashMap();
			options.put(CompilerOptions.OPTION_Compliance, compilerVersion);
			options.put(CompilerOptions.OPTION_Source, compilerVersion);
			options.put(CompilerOptions.OPTION_TargetPlatform, compilerVersion);
			javaProject.setOptions(options);
		}
		return project.getFullPath();
	}

