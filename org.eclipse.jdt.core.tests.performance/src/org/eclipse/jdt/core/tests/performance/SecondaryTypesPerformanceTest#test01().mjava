	public void test01() {
		List<String> classpathList = new ArrayList<>();
		classpathList.addAll(createClasspathStrings());
		classpathList.add(testScratchArea);

		for (int i = 0; i<10; ++i) {
			ASTParser parser = ASTParser.newParser(AST.JLS16);
			parser.setResolveBindings(true);
			parser.setStatementsRecovery(true);
			parser.setBindingsRecovery(true);
			parser.setCompilerOptions(createCompilerOptions());
			parser.setUnitName("X");
			parser.setKind(ASTParser.K_COMPILATION_UNIT);
			parser.setEnvironment(classpathList.toArray(new String[classpathList.size()]), null, null, true);
			parser.setSource((""
					+ "import test.performance.test1.*;\n"
					+ "public enum X\n" +
					"{\n" +
					"    TEST;\n" +
					"\n" +
					"    public void method() {\n" +
					"        new Z().toString();\n" +
					"        new test.performance.test2.Z().toString();\n" +
					"        new test.performance.test3.Z().toString();\n" +
					"\n" +
					"    }\n" +
					"}").toCharArray());

			startMeasuring();
			ASTNode theAST = parser.createAST(null);
			theAST.accept(new ASTVisitor() {});
			stopMeasuring();
		}

		//Commit measure
		commitMeasurements();
		assertPerformance();
	}

