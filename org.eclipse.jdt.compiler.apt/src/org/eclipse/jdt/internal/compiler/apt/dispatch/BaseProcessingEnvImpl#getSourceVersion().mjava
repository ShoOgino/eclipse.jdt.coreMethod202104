	@Override
	public SourceVersion getSourceVersion() {
		if (this._compiler.options.sourceLevel <= ClassFileConstants.JDK1_5) {
			return SourceVersion.RELEASE_5;
		}
		if (this._compiler.options.sourceLevel == ClassFileConstants.JDK1_6) {
			return SourceVersion.RELEASE_6;
		}
		try {
			if (this._compiler.options.sourceLevel == ClassFileConstants.JDK1_7) {
				return SourceVersion.valueOf("RELEASE_7"); //$NON-NLS-1$
			}
			if (this._compiler.options.sourceLevel == ClassFileConstants.JDK1_8) {
				return SourceVersion.valueOf("RELEASE_8"); //$NON-NLS-1$
			}
			if (this._compiler.options.sourceLevel == ClassFileConstants.JDK9) {
				return SourceVersion.valueOf("RELEASE_9"); //$NON-NLS-1$
			}
			if (this._compiler.options.sourceLevel == ClassFileConstants.JDK10) {
				return SourceVersion.valueOf("RELEASE_10"); //$NON-NLS-1$
			}
			if (this._compiler.options.sourceLevel == ClassFileConstants.JDK11) {
				return SourceVersion.valueOf("RELEASE_11"); //$NON-NLS-1$
			}
			if (this._compiler.options.sourceLevel == ClassFileConstants.JDK12) {
				return SourceVersion.valueOf("RELEASE_12"); //$NON-NLS-1$
			}
			if (this._compiler.options.sourceLevel == ClassFileConstants.JDK13) {
				return SourceVersion.valueOf("RELEASE_13"); //$NON-NLS-1$
			}
			if (this._compiler.options.sourceLevel == ClassFileConstants.JDK14) {
				return SourceVersion.valueOf("RELEASE_14"); //$NON-NLS-1$
			}
			if (this._compiler.options.sourceLevel == ClassFileConstants.JDK15) {
				return SourceVersion.valueOf("RELEASE_15"); //$NON-NLS-1$
			}
		} catch(IllegalArgumentException e) {
			// handle call on a JDK 6
			return SourceVersion.RELEASE_6;
		}
		// handle call on a JDK 6 by default
		return SourceVersion.RELEASE_6;
	}

