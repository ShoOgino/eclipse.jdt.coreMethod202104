	@Override
	public boolean visit(LambdaExpression node) {
		int lParen = this.tm.firstIndexIn(node, -1);
		if (this.tm.get(lParen).tokenType == TokenNameLPAREN) {
			int rParen = this.tm.firstIndexBefore(node.getBody(), TokenNameRPAREN);
			handleParenthesesPositions(lParen, rParen, this.options.parenthesis_positions_in_lambda_declaration);
		}
		if (node.getBody() instanceof Block) {
			forceContinuousWrapping(node.getBody(), this.tm.firstIndexIn(node, -1));

			List<Statement> statements = ((Block) node.getBody()).statements();
			if (!statements.isEmpty()) {
				int openBraceIndex = this.tm.firstIndexBefore(statements.get(0), TokenNameLBRACE);
				int closeBraceIndex = this.tm.firstIndexAfter(statements.get(statements.size() - 1), TokenNameRBRACE);
				boolean areKeptOnOneLine = this.tm.stream()
						.skip(openBraceIndex + 1).limit(closeBraceIndex - openBraceIndex - 1)
						.allMatch(t -> t.getLineBreaksBefore() == 0 && t.getLineBreaksAfter() == 0);
				if (areKeptOnOneLine) {
					for (Statement statement : statements)
						this.wrapIndexes.add(this.tm.firstIndexIn(statement, -1));
					this.wrapParentIndex = openBraceIndex;
					this.wrapGroupEnd = closeBraceIndex;
					handleWrap(Alignment.M_ONE_PER_LINE_SPLIT, node);
					this.tm.get(closeBraceIndex).setWrapPolicy(new WrapPolicy(WrapMode.TOP_PRIORITY, openBraceIndex,
							closeBraceIndex, 0, this.currentDepth, 1, false, false));
				}
			}
		}
		if (node.hasParentheses()) {
			List<VariableDeclaration> parameters = node.parameters();
			// the legacy formatter didn't like wrapping lambda parameters, so neither do we
			this.currentDepth++;
			handleArguments(parameters, this.options.alignment_for_parameters_in_method_declaration);
			this.currentDepth--;
		}
		return true;
	}

