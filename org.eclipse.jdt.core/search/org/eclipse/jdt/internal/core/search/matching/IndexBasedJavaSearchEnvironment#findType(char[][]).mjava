	@Override
	public NameEnvironmentAnswer findType(char[][] compoundTypeName) {
		char[] binaryName = CharOperation.concatWith(compoundTypeName, '/');

		int bestEntryPosition = Integer.MAX_VALUE;
		NameEnvironmentAnswer result = findClassInUnindexedLocations(new String(binaryName), compoundTypeName[compoundTypeName.length - 1]);
		if (result != null) {
			bestEntryPosition = this.sourceEntryPosition;
		}

		long start = -1;
		if (NameLookup.VERBOSE)
			start = System.currentTimeMillis();
		try {
			char[] fieldDescriptor = JavaNames.binaryNameToFieldDescriptor(binaryName);
			JavaIndex index = JavaIndex.getIndex();
			Nd nd = index.getNd();
			try (IReader lock = nd.acquireReadLock()) {
				NdTypeId typeId = index.findType(fieldDescriptor);

				if (typeId != null) {
					List<NdType> types = typeId.getTypes();
					for (NdType next : types) {
						NdResourceFile resource = next.getFile();

						IPath path = resource.getPath();
						Integer nextRoot = this.mapPathsToRoots.getMostSpecific(path);
						if (nextRoot != null) {
							IPackageFragmentRoot root = this.roots[nextRoot];

							ClasspathEntry classpathEntry = (ClasspathEntry)root.getRawClasspathEntry();
							AccessRuleSet ruleSet = classpathEntry.getAccessRuleSet();
							AccessRestriction accessRestriction = ruleSet == null? null : ruleSet.getViolatedRestriction(binaryName);
							TypeRef typeRef = TypeRef.create(next);
							String fileName = new String(binaryName) + ".class"; //$NON-NLS-1$
							IBinaryType binaryType = new IndexBinaryType(typeRef, fileName.toCharArray());
							NameEnvironmentAnswer nextAnswer = new NameEnvironmentAnswer(binaryType, accessRestriction);

							boolean useNewAnswer = isBetter(result, bestEntryPosition, nextAnswer, nextRoot);

							if (useNewAnswer) {
								bestEntryPosition = nextRoot;
								result = nextAnswer;
							}
						}
					}
				}
			} catch (JavaModelException e) {
				// project doesn't exist
			}
		} finally {
			if (NameLookup.VERBOSE)
				this.timeSpentInFindType += System.currentTimeMillis()-start;
		}

		return result;
	}

