	@Override
	public synchronized char[][] getModulesDeclaringPackage(String qualifiedPackageName, String moduleName) {
		if (this.jdklevel >= ClassFileConstants.JDK9) {
			// Delegate to the boss, even if it means inaccurate error reporting at times
			List<String> mods = JRTUtil.getModulesDeclaringPackage(this.file, qualifiedPackageName, moduleName);
			return CharOperation.toCharArrays(mods);
		}
		if (this.packageCache == null) {
			this.packageCache = new HashSet<>(41);
			this.packageCache.add(Util.EMPTY_STRING);
			try (DirectoryStream<java.nio.file.Path> stream = Files.newDirectoryStream(this.releasePath)) {
				for (final java.nio.file.Path subdir: stream) {
					String rel = JRTUtil.sanitizedFileName(subdir);
					if (!rel.contains(this.releaseInHex)) {
						continue;
					}
					try (DirectoryStream<java.nio.file.Path> stream2 = Files.newDirectoryStream(subdir)) {
						for (final java.nio.file.Path subdir2: stream2) {
							Files.walkFileTree(subdir2, new FileVisitor<java.nio.file.Path>() {
								@Override
								public FileVisitResult preVisitDirectory(java.nio.file.Path dir, BasicFileAttributes attrs) throws IOException {
									if (dir.getNameCount() <= 2)
										return FileVisitResult.CONTINUE;
									Path relative = dir.subpath(2, dir.getNameCount());
									addToPackageCache(relative.toString(), false);
									return FileVisitResult.CONTINUE;
								}

								@Override
								public FileVisitResult visitFile(java.nio.file.Path f, BasicFileAttributes attrs) throws IOException {
									return FileVisitResult.CONTINUE;
								}

								@Override
								public FileVisitResult visitFileFailed(java.nio.file.Path f, IOException exc) throws IOException {
									return FileVisitResult.CONTINUE;
								}

								@Override
								public FileVisitResult postVisitDirectory(java.nio.file.Path dir, IOException exc) throws IOException {
									return FileVisitResult.CONTINUE;
								}
							});
						}
					}
				}
			} catch (IOException e) {
				e.printStackTrace();
				// Rethrow
			}
		}
		return singletonModuleNameIf(this.packageCache.contains(qualifiedPackageName));
	}

