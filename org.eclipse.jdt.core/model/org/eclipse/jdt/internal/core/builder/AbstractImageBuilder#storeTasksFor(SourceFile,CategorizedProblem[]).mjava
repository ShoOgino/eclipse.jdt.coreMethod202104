protected void storeTasksFor(SourceFile sourceFile, CategorizedProblem[] tasks) throws CoreException {
	if (sourceFile == null || tasks == null || tasks.length == 0) return;

	IResource resource = sourceFile.resource;
	for (int i = 0, l = tasks.length; i < l; i++) {
		CategorizedProblem task = tasks[i];
		if (task.getID() == IProblem.Task) {
			Integer priority = P_NORMAL;
			String compilerPriority = task.getArguments()[2];
			if (JavaCore.COMPILER_TASK_PRIORITY_HIGH.equals(compilerPriority))
				priority = P_HIGH;
			else if (JavaCore.COMPILER_TASK_PRIORITY_LOW.equals(compilerPriority))
				priority = P_LOW;

			// standard attributes
			Map<String, Object> attributes = new HashMap<>();

			attributes.put(IMarker.MESSAGE, task.getMessage());
			attributes.put(IMarker.PRIORITY, priority);
			attributes.put(IJavaModelMarker.ID, Integer.valueOf(task.getID()));
			attributes.put(IMarker.CHAR_START, Integer.valueOf(task.getSourceStart()));
			attributes.put(IMarker.CHAR_END, Integer.valueOf(task.getSourceEnd() + 1));
			attributes.put(IMarker.LINE_NUMBER, Integer.valueOf(task.getSourceLineNumber()));
			attributes.put(IMarker.USER_EDITABLE, Boolean.FALSE);
			attributes.put(IMarker.SOURCE_ID, JavaBuilder.SOURCE_ID);

			// optional extra attributes
			String[] extraAttributeNames = task.getExtraMarkerAttributeNames();
			Object[] extraAttributeValues = task.getExtraMarkerAttributeValues();
			if (extraAttributeNames != null && extraAttributeValues != null
					&& extraAttributeNames.length == extraAttributeValues.length) {
				for (int j = 0; j < extraAttributeNames.length; j++) {
					attributes.put(extraAttributeNames[j], extraAttributeValues[j]);
				}
			}

			resource.createMarker(IJavaModelMarker.TASK_MARKER, attributes);
		}
	}
}

