	@Override
	public void collectPatternVariablesToScope(LocalVariableBinding[] variables, BlockScope scope) {
		this.valueIfFalse.collectPatternVariablesToScope(null, scope);
		this.valueIfTrue.collectPatternVariablesToScope(null, scope);
		if (this.valueIfFalse.containsPatternVariable() && this.valueIfTrue.containsPatternVariable() ) {
			LocalVariableBinding[] first = this.valueIfTrue.patternVarsWhenTrue;
			LocalVariableBinding[] second = this.valueIfFalse.patternVarsWhenTrue;
			if (first != null && second != null) {
				for (LocalVariableBinding localVariableBinding : first) {
					char[] name = localVariableBinding.name;
					for (LocalVariableBinding localVariableBinding2 : second) {
						if (CharOperation.equals(name, localVariableBinding2.name)) {
							scope.problemReporter().illegalRedeclarationOfPatternVar(localVariableBinding2, localVariableBinding2.declaration);
						}
					}
				}
			}
			first = this.valueIfTrue.patternVarsWhenFalse;
			second = this.valueIfFalse.patternVarsWhenFalse;
			if (first != null && second != null) {
				for (LocalVariableBinding localVariableBinding : first) {
					char[] name = localVariableBinding.name;
					for (LocalVariableBinding localVariableBinding2 : second) {
						if (CharOperation.equals(name, localVariableBinding2.name)) {
							scope.problemReporter().illegalRedeclarationOfPatternVar(localVariableBinding2, localVariableBinding2.declaration);
						}
					}
				}
			}
		}

		if (!this.condition.containsPatternVariable()) {
			return;
		}
		if (this.condition.getPatternVariableIntroduced() != null) {
			char[] name = this.condition.getPatternVariableIntroduced().name;
			LocalDeclaration localVar = this.valueIfTrue.getPatternVariableIntroduced();
			if (localVar != null && CharOperation.equals(name, localVar.name)) {
					scope.problemReporter().illegalRedeclarationOfPatternVar(localVar.binding, localVar);
					return;
			}
			localVar = this.valueIfFalse.getPatternVariableIntroduced();
			if (localVar != null && CharOperation.equals(name, localVar.name)) {
				scope.problemReporter().illegalRedeclarationOfPatternVar(localVar.binding, localVar);
				return;
			}
		}
		this.condition.collectPatternVariablesToScope(this.patternVarsWhenTrue, scope);

		variables = this.condition.getPatternVariablesWhenTrue();
		this.valueIfTrue.addPatternVariablesWhenTrue(variables);
		this.valueIfFalse.addPatternVariablesWhenFalse(variables);
		this.valueIfTrue.collectPatternVariablesToScope(variables, scope);

		variables = this.condition.getPatternVariablesWhenFalse();
		this.valueIfTrue.addPatternVariablesWhenFalse(variables);
		this.valueIfFalse.addPatternVariablesWhenTrue(variables);
		this.valueIfFalse.collectPatternVariablesToScope(variables, scope);
	}

