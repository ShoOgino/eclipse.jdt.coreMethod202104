@Override
public void resolve(BlockScope upperScope) {
	// special scope for secret locals optimization.
	this.scope = new BlockScope(upperScope);
	TypeBinding type = this.expression.resolveType(this.scope);
	if (type != null) {
		switch (type.id) {
			case T_boolean :
			case T_char :
			case T_float :
			case T_double :
			case T_byte :
			case T_short :
			case T_int :
			case T_long :
				this.scope.problemReporter().invalidTypeToSynchronize(this.expression, type);
				break;
			case T_void :
				this.scope.problemReporter().illegalVoidExpression(this.expression);
				break;
			case T_null :
				this.scope.problemReporter().invalidNullToSynchronize(this.expression);
				break;
			default :
				if (type.hasValueBasedTypeAnnotation()) {
					this.scope.problemReporter().discouragedValueBasedTypeToSynchronize(this.expression, type);
				}
			}
			//continue even on errors in order to have the TC done into the statements
			this.synchroVariable = new LocalVariableBinding(SecretLocalDeclarationName, type, ClassFileConstants.AccDefault, false);
			this.scope.addLocalVariable(this.synchroVariable);
			this.synchroVariable.setConstant(Constant.NotAConstant); // not inlinable
			this.expression.computeConversion(this.scope, type, type);
	}
	this.block.resolveUsing(this.scope);
}

