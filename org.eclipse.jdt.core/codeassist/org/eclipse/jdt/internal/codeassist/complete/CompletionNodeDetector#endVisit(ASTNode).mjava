	private void endVisit(ASTNode astNode) {
		if(this.result && this.parent == null && astNode != this.searchedNode) {
			if(!(astNode instanceof AllocationExpression && ((AllocationExpression) astNode).type == this.searchedNode)
				&& !(astNode instanceof ConditionalExpression && ((ConditionalExpression) astNode).valueIfTrue == this.searchedNode)
				&& !(astNode instanceof ConditionalExpression && ((ConditionalExpression) astNode).valueIfFalse == this.searchedNode)) {
				this.parent = astNode;
				return;
			}
		}

		// when we have recovering node like private Map<String, Function<I,R>> the visitor actually endVisit on I and
		// R when completions are requested at I. The above logic actually identify R as a parent since the R is visited
		// and endVisited after founding that I was the searched node. This happens for all type parameters which are at
		// index where index < n.
		// Therefore we need to following check to fix the parent by setting the parent to the node which represents
		// Map<String, Function<Long,$>> when we are invoking endVisit.
		if(this.result && astNode instanceof ParameterizedSingleTypeReference &&
				Stream.of(((ParameterizedSingleTypeReference) astNode).typeArguments).anyMatch(n -> n == this.searchedNode)) {
			this.parent = astNode;
		}
	}

