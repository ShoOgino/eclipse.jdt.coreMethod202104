	public void testNodeTypeConstants() throws Exception {
		// it would be a breaking API change to change the numeric values of
		// public static final ints
		int[] nodeTypes = {
			ASTNode.ANONYMOUS_CLASS_DECLARATION,
			ASTNode.ARRAY_ACCESS,
			ASTNode.ARRAY_CREATION,
			ASTNode.ARRAY_INITIALIZER,
			ASTNode.ARRAY_TYPE,
			ASTNode.ASSERT_STATEMENT,
			ASTNode.ASSIGNMENT,
			ASTNode.BLOCK,
			ASTNode.BOOLEAN_LITERAL,
			ASTNode.BREAK_STATEMENT,
			ASTNode.CAST_EXPRESSION,
			ASTNode.CATCH_CLAUSE,
			ASTNode.CHARACTER_LITERAL,
			ASTNode.CLASS_INSTANCE_CREATION,
			ASTNode.COMPILATION_UNIT,
			ASTNode.CONDITIONAL_EXPRESSION,
			ASTNode.CONSTRUCTOR_INVOCATION,
			ASTNode.CONTINUE_STATEMENT,
			ASTNode.DO_STATEMENT,
			ASTNode.EMPTY_STATEMENT,
			ASTNode.EXPRESSION_STATEMENT,
			ASTNode.FIELD_ACCESS,
			ASTNode.FIELD_DECLARATION,
			ASTNode.FOR_STATEMENT,
			ASTNode.IF_STATEMENT,
			ASTNode.IMPORT_DECLARATION,
			ASTNode.INFIX_EXPRESSION,
			ASTNode.INITIALIZER,
			ASTNode.JAVADOC,
			ASTNode.LABELED_STATEMENT,
			ASTNode.METHOD_DECLARATION,
			ASTNode.METHOD_INVOCATION,
			ASTNode.NULL_LITERAL,
			ASTNode.NUMBER_LITERAL,
			ASTNode.PACKAGE_DECLARATION,
			ASTNode.PARENTHESIZED_EXPRESSION,
			ASTNode.POSTFIX_EXPRESSION,
			ASTNode.PREFIX_EXPRESSION,
			ASTNode.PRIMITIVE_TYPE,
			ASTNode.QUALIFIED_NAME,
			ASTNode.RETURN_STATEMENT,
			ASTNode.SIMPLE_NAME,
			ASTNode.SIMPLE_TYPE,
			ASTNode.SINGLE_VARIABLE_DECLARATION,
			ASTNode.STRING_LITERAL,
			ASTNode.SUPER_CONSTRUCTOR_INVOCATION,
			ASTNode.SUPER_FIELD_ACCESS,
			ASTNode.SUPER_METHOD_INVOCATION,
			ASTNode.SWITCH_CASE,
			ASTNode.SWITCH_STATEMENT,
			ASTNode.SYNCHRONIZED_STATEMENT,
			ASTNode.THIS_EXPRESSION,
			ASTNode.THROW_STATEMENT,
			ASTNode.TRY_STATEMENT,
			ASTNode.TYPE_DECLARATION,
			ASTNode.TYPE_DECLARATION_STATEMENT,
			ASTNode.TYPE_LITERAL,
			ASTNode.VARIABLE_DECLARATION_EXPRESSION,
			ASTNode.VARIABLE_DECLARATION_FRAGMENT,
			ASTNode.VARIABLE_DECLARATION_STATEMENT,
			ASTNode.WHILE_STATEMENT,
			ASTNode.INSTANCEOF_EXPRESSION,
			ASTNode.LINE_COMMENT,
			ASTNode.BLOCK_COMMENT,
			ASTNode.TAG_ELEMENT,
			ASTNode.TEXT_ELEMENT,
			ASTNode.MEMBER_REF,
			ASTNode.METHOD_REF,
			ASTNode.METHOD_REF_PARAMETER,
			ASTNode.ENHANCED_FOR_STATEMENT,
			ASTNode.ENUM_DECLARATION,
			ASTNode.ENUM_CONSTANT_DECLARATION,
			ASTNode.TYPE_PARAMETER,
			ASTNode.PARAMETERIZED_TYPE,
			ASTNode.QUALIFIED_TYPE,
			ASTNode.WILDCARD_TYPE,
			ASTNode.NORMAL_ANNOTATION,
			ASTNode.MARKER_ANNOTATION,
			ASTNode.SINGLE_MEMBER_ANNOTATION,
			ASTNode.MEMBER_VALUE_PAIR,
			ASTNode.ANNOTATION_TYPE_DECLARATION,
			ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION,
			ASTNode.MODIFIER,
			ASTNode.UNION_TYPE,
			ASTNode.DIMENSION,
			ASTNode.LAMBDA_EXPRESSION,
			ASTNode.INTERSECTION_TYPE,
			ASTNode.NAME_QUALIFIED_TYPE,
			ASTNode.CREATION_REFERENCE,
			ASTNode.EXPRESSION_METHOD_REFERENCE,
			ASTNode.SUPER_METHOD_REFERENCE,
			ASTNode.TYPE_METHOD_REFERENCE,
			ASTNode.MODULE_DECLARATION,
			ASTNode.REQUIRES_DIRECTIVE,
			ASTNode.EXPORTS_DIRECTIVE,
			ASTNode.OPENS_DIRECTIVE,
			ASTNode.USES_DIRECTIVE,
			ASTNode.PROVIDES_DIRECTIVE,
			ASTNode.MODULE_MODIFIER,
			ASTNode.SWITCH_EXPRESSION,
			ASTNode.YIELD_STATEMENT,
			ASTNode.TEXT_BLOCK,
			ASTNode.RECORD_DECLARATION

		};

		// assert that nodeType values are correct:
		for (int i= 0; i < nodeTypes.length; i++) {
			assertSame(i + 1, nodeTypes[i]);
		}

		// test nodeClassForType:
		for (int i= 0; i < nodeTypes.length; i++) {
			int nodeType = nodeTypes[i];
			ASTNode node;
			try {
				node = this.ast.createInstance(nodeType);
			} catch (IllegalArgumentException e) {
				if (this.API_LEVEL < AST_INTERNAL_JLS9 && e.getCause() instanceof UnsupportedOperationException) {
					continue;
				} else {
					throw new AssertionFailedError("missing node type: " + nodeType);
				}
			}
			assertEquals(nodeType, node.getNodeType());
		}

		// assert that test covers all nodeTypes:
		Field[] fields = ASTNode.class.getDeclaredFields();
		HashSet declaredNodeTypes = new HashSet();
		for (int i= 0; i < fields.length; i++) {
			Field field= fields[i];
			if (field.getType() != int.class)
				continue;
			if (field.getModifiers() != (java.lang.reflect.Modifier.PUBLIC | java.lang.reflect.Modifier.STATIC | java.lang.reflect.Modifier.FINAL))
				continue;
			String name = field.getName();
			if ("MALFORMED".equals(name) || "ORIGINAL".equals(name) || "PROTECT".equals(name) || "RECOVERED".equals(name))
				continue;
			declaredNodeTypes.add(Integer.valueOf(field.getInt(null)));
		}
		for (int i= 0; i < nodeTypes.length; i++) {
			int nodeType= nodeTypes[i];
			assertTrue("node type " + nodeType + " from test is missing in ASTNode", declaredNodeTypes.remove(Integer.valueOf(nodeType)));
			nodeTypes[i] = -1;
		}
		for (int i= 0; i < nodeTypes.length; i++) {
			int nodeType= nodeTypes[i];
			assertEquals("node type " + nodeType + " missing in ASTNode", -1, nodeType);
		}
		assertEquals("node types missing in test", Collections.EMPTY_SET, declaredNodeTypes);
	}

