	public void testSealedModifier_002() throws Exception {
		if (checkAPILevel(15)) {
			return;
		}
		IPackageFragment pack1= this.sourceFolder.createPackageFragment("test1", false, null);
		StringBuffer buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("public sealed class C permits C1, C2 {\n");
		buf.append("\n");
		buf.append("}\n");
		buf.append("final class  C1 extends C{\n");
		buf.append("\n");
		buf.append("}\n");
		buf.append("non-sealed class  C2 extends C{}\n");
		ICompilationUnit cu= pack1.createCompilationUnit("C.java", buf.toString(), false, null);

		String old = this.project1.getOption(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, true);
		try {
			this.project1.setOption(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);
			this.project1.setOption(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);
			this.project1.setOption(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_15);
			this.project1.setOption(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_15);
			this.project1.setOption(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, JavaCore.VERSION_15);
			CompilationUnit astRoot= createAST(cu);
			ASTRewrite rewrite= ASTRewrite.create(astRoot.getAST());

			assertTrue("Parse errors", (astRoot.getFlags() & ASTNode.MALFORMED) == 0);
			TypeDeclaration typeC= findTypeDeclaration(astRoot, "C");
			{ // remove permits

					ListRewrite listRewrite2= rewrite.getListRewrite(typeC, TypeDeclaration.PERMITS_TYPES_PROPERTY);
					List permittedTypes = typeC.permittedTypes();
					listRewrite2.remove((SimpleType)permittedTypes.get(1), null);

			}

			String preview= evaluateRewrite(cu, rewrite);

			buf= new StringBuffer();
			buf.append("package test1;\n");
			buf.append("public sealed class C permits C1 {\n");
			buf.append("\n");
			buf.append("}\n");
			buf.append("final class  C1 extends C{\n");
			buf.append("\n");
			buf.append("}\n");
			buf.append("non-sealed class  C2 extends C{}\n");

			assertEqualString(preview, buf.toString());
		}finally {
			this.project1.setOption(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, old);
		}

	}

