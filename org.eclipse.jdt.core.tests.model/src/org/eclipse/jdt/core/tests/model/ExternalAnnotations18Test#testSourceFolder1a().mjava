	// reconcile client of a "generated" source+eea
    // single merged output folder
    @SuppressWarnings("deprecation")
	public void testSourceFolder1a() throws CoreException {
		myCreateJavaProject("Bug509397");
		addSourceFolderWithExternalAnnotations(this.project, "/Bug509397/src-gen", null, "/Bug509397/annot-gen");

		createFileInProject("annot-gen/pgen", "CGen.eea",
				"class pgen/CGen\n" +
				"\n" +
				"get\n" +
				" (Ljava/lang/String;)Ljava/lang/String;\n" +
				" (L1java/lang/String;)L1java/lang/String;\n");

		createFileInProject("src-gen/pgen", "CGen.java",
				"package pgen;\n" +
				"public class CGen {\n" +
				"	public String get(String in) { return in; }\n" +
				"}\n");
		this.project.getProject().build(IncrementalProjectBuilder.FULL_BUILD, null);

		IPackageFragment fragment = this.project.getPackageFragmentRoots()[0].createPackageFragment("p", true, null);
		ICompilationUnit unit = fragment.createCompilationUnit("Use.java",
				"package p;\n" +
				"import pgen.CGen;\n" +
				"import org.eclipse.jdt.annotation.NonNull;\n" +
				"public class Use {\n" +
				"	public @NonNull String test(CGen c) {\n" +
				"		String s = c.get(null);\n" + // problem here (6)
				"		return s;\n" + // no problem here
				"	}\n" +
				"}\n",
				true, new NullProgressMonitor()).getWorkingCopy(new NullProgressMonitor());
		CompilationUnit reconciled = unit.reconcile(AST.JLS8, true, null, new NullProgressMonitor());
		IProblem[] problems = reconciled.getProblems();
		assertProblems(problems, new String[] {
				"Pb(910) Null type mismatch: required '@NonNull String' but the provided value is null"
			}, new int[] { 6 });
	}

