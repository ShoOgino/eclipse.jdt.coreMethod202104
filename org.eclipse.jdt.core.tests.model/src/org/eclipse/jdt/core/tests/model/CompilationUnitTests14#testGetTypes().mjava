/**
 * Ensures that correct number of types with the correct names and modifiers
 * exist in a compilation unit.
 */
public void testGetTypes() throws JavaModelException {
	if (canRunJava15()) {
		IType[] types = this.cu.getTypes();
		String[] typeNames = new String[] {"X", "I", "I2", "I3", "Y", "Colors", "Annot", "Record"};
		String[] flags = new String[] {"public", "", "", "", "", "", "", ""};
		boolean[] isClass = new boolean[] {true, false, false, false, true, false, false, false};
		boolean[] isInterface = new boolean[] {false, true, true, true, false, false, true, false};
		boolean[] isAnnotation = new boolean[] {false, false, false, false, false, false, true, false};
		boolean[] isEnum = new boolean[] {false, false, false, false, false, true, false, false};
		boolean[] isRecord = new boolean[] {false, false, false, false, false, false, false, true};
		String[] superclassName = new String[] {null, null, null, null, null, null, null, "java.lang.Record"};
		String[] superclassType = new String[] {null, null, null, null, null, null, null, "Qjava.lang.Record;"};
		String[][] superInterfaceNames = new String[][] {
				new String[] {"Runnable"}, new String[0], new String[0], new String[0], new String[] {"I2<E>"}, new String[0], new String[0], new String[0]
		};
		String[][] superInterfaceTypes = new String[][] {
				new String[] {"QRunnable;"}, new String[0], new String[0], new String[0], new String[] {"QI2<QE;>;"}, new String[0], new String[0], new String[0]
		};
		String[][] formalTypeParameters = new String[][] {
			new String[0], new String[0], new String[] {"E"}, new String[0], new String[] {"E"}, new String[0], new String[0], new String[0]
		};

		assertEquals("Wrong number of types returned", typeNames.length, types.length);
		for (int i = 0; i < types.length; i++) {
			assertEquals("Incorrect name for the " + i + " type", typeNames[i], types[i].getElementName());
			String mod= Flags.toString(types[i].getFlags());
			assertEquals("Unexpected modifier for " + types[i].getElementName(), flags[i], mod);
			assertTrue("Type does not exist " + types[i], types[i].exists());
			assertEquals("Incorrect isClass for the " + i + " type", isClass[i], types[i].isClass());
			assertEquals("Incorrect isInterface for the " + i + " type", isInterface[i], types[i].isInterface());
			assertEquals("Incorrect isAnnotation for the " + i + " type", isAnnotation[i], types[i].isAnnotation());
			assertEquals("Incorrect isEnum for the " + i + " type", isEnum[i], types[i].isEnum());
			assertEquals("Incorrect isRecord for the " + i + " type", isRecord[i], types[i].isRecord());
			assertEquals("Incorrect superclassName for the " + i + " type", superclassName[i], types[i].getSuperclassName());
			assertEquals("Incorrect superclassType for the " + i + " type", superclassType[i], types[i].getSuperclassTypeSignature());
			assertEquals("Incorrect superInterfaceNames for the " + i + " type", superInterfaceNames[i].length, types[i].getSuperInterfaceNames().length);
			assertEquals("Incorrect superInterfaceTypes for the " + i + " type", superInterfaceTypes[i].length, types[i].getSuperInterfaceTypeSignatures().length);
			assertEquals("Incorrect formalTypeParameters for the " + i + " type", formalTypeParameters[i].length, types[i].getTypeParameters().length);
		}
	}
}

