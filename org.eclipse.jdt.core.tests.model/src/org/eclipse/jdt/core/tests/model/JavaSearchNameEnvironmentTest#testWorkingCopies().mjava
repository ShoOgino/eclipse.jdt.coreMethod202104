	public void testWorkingCopies() throws CoreException {

		this.workingCopies = new ICompilationUnit[3];
		this.workingCopies[0] = getWorkingCopy("/JavaSearchMultipleProjects2/src/b88300/SubClass.java",
				"package b88300;\n" +
				"public class SubClass extends SuperClass {\n" +
				"	private void aMethod(String x) {\n" +
				"	}\n" +
				"	public void aMethod(Object x) {\n" +
				"	}\n" +
				"}\n"
			);
			this.workingCopies[1] = getWorkingCopy("/JavaSearchMultipleProjects2/src/b88300/SuperClass.java",
				"package b88300;\n" +
				"public class SuperClass {\n" +
				"    public void aMethod(Object x) {\n" +
				"    }\n" +
				"}\n"
				);
			this.workingCopies[2] = getWorkingCopy("/JavaSearchMultipleProjects2/src/b88300/User.java",
				"package b88300;\n" +
				"public class User {\n" +
				"    public void methodUsingSubClassMethod() {\n" +
				"        SuperClass user = new SubClass();\n" +
				"        user.aMethod(new Object());\n" +
				"    }\n" +
				"}\n"
			);

		JavaSearchNameEnvironmentUnderTest nameEnvironment = newJavaSearchEnvironment(this.p2, this.p1);

		Iterable<ClasspathLocation> locationsForPackage = nameEnvironment.getLocationsFor(null, "b88300");
		assertNotNull(locationsForPackage);
		assertTrue(locationsForPackage.iterator().hasNext());
		ClasspathLocation cp = locationsForPackage.iterator().next();
		assertTrue(cp instanceof ClasspathSourceDirectory);

		char[][] packageName = new char[][] { "b88300".toCharArray() };
		assertNotNull("Type User not found!", nameEnvironment.findType("User".toCharArray(), packageName));
		assertNotNull("Type SuperClass not found!", nameEnvironment.findType("SuperClass".toCharArray(), packageName));
		assertNotNull("Type SubClass not found!", nameEnvironment.findType("SubClass".toCharArray(), packageName));
	}

