/* (non-Javadoc)
 * @see org.eclipse.jdt.core.tests.model.AbstractJavaModelTests#setUpSuite()
 */
@Override
public void setUpSuite() throws Exception {
	super.setUpSuite();

	setUpJavaProject("TypeHierarchy");
	addLibrary("myLib.jar", "myLibsrc.zip", new String[] {
		"my/pkg/X.java",
		"package my.pkg;\n" +
		"public class X {\n" +
		"}",
		"my/pkg/Y.java",
		"package my.pkg;\n" +
		"public class Y {\n" +
		"  void foo() {\n" +
		"    new X() {};" +
		"  }\n" +
		"}",
	}, JavaCore.VERSION_1_4);

	IPackageFragmentRoot root = this.currentProject.getPackageFragmentRoot(this.currentProject.getProject().getFile("lib.jar"));
	IRegion region = JavaCore.newRegion();
	region.add(root);
	this.typeHierarchy = this.currentProject.newTypeHierarchy(region, null);

	IJavaProject project15 = createJavaProject("TypeHierarchy15", new String[] {"src"}, new String[] {"JCL15_LIB"}, "bin", "1.5");
	addLibrary(project15, "lib15.jar", "lib15src.zip", new String[] {
		"util/AbstractList.java",
		"package util;\n" +
		"public class AbstractList<E> {\n" +
		"}",
		"util/ArrayList.java",
		"package util;\n" +
		"public class ArrayList<E> extends AbstractList<E> implements List<E> {\n" +
		"}",
		"util/List.java",
		"package util;\n" +
		"public interface List<E> {\n" +
		"}",
		"util/Map.java",
		"package util;\n" +
		"public class Map<K,V> extends AbstractList<V> {\n" +
		"}",
	}, JavaCore.VERSION_1_5);
	createFile(
		"/TypeHierarchy15/src/X.java",
		"import util.*;\n" +
		"public class X<E> extends ArrayList<E> implements List<E> {\n" +
		"}"
	);
	createFile(
		"/TypeHierarchy15/src/Y.java",
		"import util.*;\n" +
		"public class Y extends ArrayList implements List {\n" +
		"}"
	);
	createFile(
		"/TypeHierarchy15/src/I.java",
		"public interface I<E> {\n" +
		"}"
	);
	createFile(
		"/TypeHierarchy15/src/A.java",
		"public class A<E> implements I<E> {\n" +
		"}"
	);
	createFile(
		"/TypeHierarchy15/src/X99606.java",
		"public class X99606 extends Y99606<X99606.Color> {\n" +
		"	static class Color {}\n" +
		"}"
	);
	createFile(
		"/TypeHierarchy15/src/Y99606.java",
		"public class Y99606<T> {\n" +
		"}"
	);
	createFile(
		"/TypeHierarchy15/src/A108740.java",
		"class A108740<T> {}"
	);
	createFile(
		"/TypeHierarchy15/src/B108740.java",
		"class B108740<T> extends A108740<C108740> {}"
	);
	createFile(
		"/TypeHierarchy15/src/C108740.java",
		"class C108740 extends B108740<C108740> {}"
	);
	createFile(
		"/TypeHierarchy15/src/D108740.java",
		"class D108740 extends B108740<D108740> {}"
	);
	createFile(
		"/TypeHierarchy15/src/CycleParent.java",
		"class CycleParent extends CycleBase<CycleChild> {}"
	);
	createFile(
		"/TypeHierarchy15/src/CycleBase.java",
		"class CycleBase<T extends CycleBase> {}"
	);
	createFile(
		"/TypeHierarchy15/src/CycleChild.java",
		"class CycleChild extends CycleParent implements Comparable<CycleChild> {\n" +
		"	public int compareTo(CycleChild o) { return 0; }\n" +
		"}"
	);
	createFile(
		"/TypeHierarchy15/src/Try.java",
		"public enum Try {\n" +
		"    THIS,\n" +
		"    THAT(),\n" +
		"    ANONYMOUS() {}\n" +
		"}"
	);

	IJavaProject project_15 = createJava15Project("TypeHierarchy_15", new String[] {"src"});
	project_15.setOption(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);
	createFolder("/TypeHierarchy_15/src/pkg");
	createFile(
			"/TypeHierarchy_15/src/pkg/Rec1.java",
			"public record Rec1 (int one) {\n" +
			"   " +
			"}"
		);
}

