public void testBug562637() throws CoreException, IOException, InterruptedException {
	if (!isJRE15) return;
	IJavaProject project15 = null;
	try {
		project15 = createJava14Project("Reconciler_15", new String[] {"src"});
		project15.setOption(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_15);
		project15.setOption(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_15);
		project15.setOption(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, JavaCore.VERSION_15);
		project15.setOption(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);
		project15.setOption(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);

		String[] sources = new String[2];
		char[][] sourceAsArray = new char[2][];
		createFolder("/Reconciler_15/src/p");
		createFolder("/Reconciler_15/src/q");
		sources[0] = "package p;\n" +
				"public record X(int a, int b) {\n" +
				"	public X {\n" +
				"		a = a * 2;\n" +
				"	}\n" +
				"	public  void foo() {}\n" +
				"}\n" +
				"class Z {\n" +
				"	public void bar() {\n" +
				"		X x = new X(0,1);\n" +
				"		int l = x.a(); // works fine in the same file\n" +
				"		System.out.println(l);\n" +
				"	}\n" +
				"}";
		createFile(
			"/Reconciler_15/src/p/X.java",
			sources[0]
		);
		sourceAsArray[0] = sources[0].toCharArray();
		sources[1] =
				"package q;\n" +
				"import p.X;\n" +
				"public class Y {\n" +
				"	public X myField; \n" +
				"	public static void main(String[] args) {\n" +
				"		X x  = new X(0, 1);\n" +
				"		int l = x.a(); //Incorrect Error: The method a() is undefined for the type X\n" +
				"		System.out.println(l);\n" +
				"	}\n" +
				"} ";

		createFile(
			"/Reconciler_15/src/q/Y.java",
			sources[1]
		);
		sourceAsArray[1] = sources[1].toCharArray();
		waitUntilIndexesReady();
		this.workingCopies = new ICompilationUnit[2];
			// Get first working copy and verify that there's no error
		this.problemRequestor.initialize(sourceAsArray[0]);
		this.workingCopies[0] = getCompilationUnit("/Reconciler_15/src/p/X.java").getWorkingCopy(this.wcOwner, null);
		assertNoProblem(sourceAsArray[0], this.workingCopies[0]);

		// Get second working copy and verify that there's no error
		this.problemRequestor.initialize(sourceAsArray[1]);
		this.workingCopies[1] = getCompilationUnit("/Reconciler_15/src/q/Y.java").getWorkingCopy(this.wcOwner, null);
		assertNoProblem(sourceAsArray[1], this.workingCopies[1]);

	} finally {
		if (project15 != null)
			deleteProject(project15);
	}
}

